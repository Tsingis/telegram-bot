name: lambda
on:
  push:
    branches:
      - main
    paths:
      - "src/**"
      - "Pipfile*"
      - "serverless.yml"
  pull_request:
    branches:
      - main
    paths:
      - "src/**"
      - "Pipfile*"
      - "requirements.txt"
      - "package*.json"
      - "serverless.yml"
      - ".github/workflows/lambda.yml"
  workflow_dispatch:
    inputs:
      stage:
        description: "Deployment stage"
        required: false
        default: "test"
        type: choice
        options:
          - test
          - prod
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event.inputs.stage }}
  cancel-in-progress: true
env:
  NO_UPDATE_NOTIFIER: true
jobs:
  lambda:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      SERVERLESS_LICENSE_KEY: ${{ secrets.SERVERLESS_LICENSE_KEY }}
      SERVERLESS_BUCKET: ${{ secrets.SERVERLESS_BUCKET }}
      CSE_ID: ${{ secrets.CSE_ID }}
      GOOGLE_API: ${{ secrets.GOOGLE_API }}
      OPENWEATHER_API: ${{ secrets.OPENWEATHER_API }}
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          architecture: "x64"
          cache: "pipenv"
          cache-dependency-path: Pipfile.lock
      - name: Install pipenv & create dependencies
        run: |
          pip install --prefer-binary -r requirements.txt
          pipenv install
          pipenv requirements > requirements.txt
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: "npm"
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
      - name: Determine token
        id: determine-token
        run: |
          if [ "${{ github.event.inputs.stage || 'test' }}" == 'prod' ]; then
            echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN_PROD }}" >> $GITHUB_ENV
          else
            echo "TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN_TEST }}" >> $GITHUB_ENV
          fi
      - name: Package
        run: npm run package -- --stage ${{ github.event.inputs.stage || 'test' }}
        env:
          TELEGRAM_TOKEN: ${{ env.TELEGRAM_TOKEN }}
      - name: Deploy ${{ github.event.inputs.stage || 'test' }}
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch')}}
        run: npm run deploy -- --package .serverless --stage ${{ github.event.inputs.stage || 'test' }}
        env:
          TELEGRAM_TOKEN: ${{ env.TELEGRAM_TOKEN }}
